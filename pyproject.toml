[tool.poetry]
name = "g"
version = "0.0.3a0"
description = "cli command to easily sync current directory"
license = "MIT"
authors = ["Tony Narlock <tony@git-pull.com>"]
classifiers = [
  "Development Status :: 4 - Beta",
  "License :: OSI Approved :: MIT License",
  "Environment :: Web Environment",
  "Intended Audience :: Developers",
  "Operating System :: POSIX",
  "Operating System :: MacOS :: MacOS X",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Utilities",
  "Topic :: System :: Shells",
]
packages = [
  { include = "*", from = "src" },
]
include = [
  { path = "tests", format = "sdist" },
]
readme = 'README.md'
keywords = [
  "g",
  "git",
  "vcs",
  "svn",
  "mercurial",
  "cli",
  "sync",
  "pull",
  "update",
  "libvcs",
]

homepage = "https://g.git-pull.com"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/vcs-python/g/issues"
Documentation = "https://g.git-pull.com"
Repository = "https://github.com/vcs-python/g"
Changes = "https://github.com/vcs-python/g/blob/master/CHANGES"

[tool.poetry.scripts]
g = 'g:run'

[tool.poetry.dependencies]
python = "^3.8"

[tool.poetry.group.dev.dependencies]
### Docs ###
sphinx = "*"
furo = "*"
gp-libs = "*"
sphinx-autodoc-typehints = "*"
sphinx-autobuild = "*"
sphinx-inline-tabs = "*"
sphinxext-opengraph = "<0.8" # https://github.com/wpilibsuite/sphinxext-opengraph/issues/100
sphinx-copybutton = "*"
sphinxext-rediraffe = "*"
myst_parser = ">=0.18.1"
docutils = "*"

### Testing ###
pytest = "*"
pytest-rerunfailures = "*"
pytest-watcher = "*"

### Coverage ###
codecov = "*"
coverage = "*"
pytest-cov = "*"

### Lint ###
black = "*"
ruff = "*"
mypy = "*"

[tool.poetry.extras]
docs = [
  "docutils",
  "sphinx",
  "sphinx-autodoc-typehints",
  "sphinx-autobuild",
  "sphinx-copybutton",
  "sphinxext-opengraph",
  "sphinx-inline-tabs",
  "sphinxext-rediraffe",
  "myst_parser",
  "furo",
  "gp-libs",
]
test = ["pytest", "pytest-rerunfailures", "pytest-watcher"]
coverage = ["codecov", "coverage", "pytest-cov"]
lint = ["black", "ruff", "mypy"]

[tool.mypy]
strict = true
files = [
  "src/",
  "tests/",
]

[tool.ruff]
target-version = "py37"
select = [
  "E", # pycodestyle
  "F", # pyflakes
  "I", # isort
  "UP", # pyupgrade
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "Q", # flake8-quotes
  "PTH", # flake8-use-pathlib
  "SIM", # flake8-simplify
  "TRY", # Trycertatops
  "PERF", # Perflint
  "RUF", # Ruff-specific rules
]

[tool.ruff.isort]
known-first-party = [
  "g",
]
combine-as-imports = true

[tool.ruff.per-file-ignores]
"*/__init__.py" = ["F401"]

[build-system]
requires = ["poetry_core>=1.0.0", "setuptools>60"]
build-backend = "poetry.core.masonry.api"
